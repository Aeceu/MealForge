import os
import json
import pickle
import random
import pandas as pd
import google.generativeai as genai
from flask import Blueprint, jsonify, request
from model.NLP import get_recipe_details_top5, get_similar_top5

# Configure the API key for Google Generative AI
genai.configure(api_key=os.getenv("AI_API_KEY"))
generate_bp = Blueprint("generate", __name__)

# Load pre-trained NLP model data ONCE as global variables
base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
print(f"Base directory: {base_dir}")
loaded_vectorizer = pickle.load(open(os.path.join(base_dir, 'dataset', 'nlp_vectorizer.pkl'), 'rb'))
loaded_tfidf_matrix = pickle.load(open(os.path.join(base_dir, 'dataset', 'nlp_tfidf_matrix.pkl'), 'rb'))
filtered_recipes = pd.read_csv(os.path.join(base_dir, 'dataset', 'recipes_data_all.csv'))

# Initialize the Generative AI model once
model = genai.GenerativeModel("gemini-1.5-flash")

@generate_bp.route("/test", methods=["POST"])
def generate():
    data = request.get_json()
    ingredients = data.get("ingredients")
    user_preference = data.get("user_preference")

    # 1. Get the top 5 similar recipes based on the user-provided ingredients
    similar_top5_indices = get_similar_top5(loaded_vectorizer, loaded_tfidf_matrix, ingredients)
    recommended_recipes = get_recipe_details_top5(filtered_recipes, similar_top5_indices)

    # Get the first recommended recipe (Top 1)
    top_recipe = recommended_recipes.iloc[random.choice(range(5))]

    # Prepare the top recipe details to pass into the prompt
    top_recipe_str = f"Title: {top_recipe['title']}, Ingredients: {top_recipe['ingredients']}, Directions: {top_recipe['directions']}, NER: {top_recipe['NER']}"
    ingredients_input_str = ', '.join(ingredients)
    user_preference_str = ', '.join(user_preference)

    # 2. Generate the updated recipe with new columns using Generative AI
    response = model.generate_content(f"""
      Create a new recipe that incorporates the following ingredients provided by the user: {ingredients_input_str}.
      Use the recipe generated by NLP as a base, but update it with additional fields and information if it lacks any required attributes.
      If the base recipe, {top_recipe_str}, does not align with the specified user ingredients, create a modified recipe that better matches the user input.
      Please make use to the following user preferences: {user_preference_str}.
      The output should be in valid JSON format with the following structure:
      {{
        "name": "Title of the recipe, as a string with a maximum length of 250 characters.",
        "ingredients": [
            {{
                "name": "The name of each ingredient from the user-provided input.",
                "measurement": "The quantity of each ingredient for 2 servings (suitable for one child and one adult)."
            }}
        ],
        "instructions": [
            "Step 1: Detailed first step of the recipe.",
            "Step 2: Detailed second step of the recipe.",
            "...additional steps."
        ],
        "type_of_cuisine": "Cuisine type (e.g., Italian, Mexican), provided as a string with up to 250 characters.",
        "nutrient_counts": "Text description of nutritional content (e.g., calories, fats, proteins).",
        "serve_hot_or_cold": "Specify if the recipe is best served hot or cold, as a string with up to 50 characters.",
        "cooking_time": "Integer representing total cooking time in minutes.",
        "benefits": "Optional text noting health benefits, if any.",
        "serve_for": "Number of servings, here set to 2."
      }}

      Ensure the instructions are provided in a clear step-by-step array format, and that the recipe fully aligns with the user-provided ingredients.
  """)

    # Parse the AI response and return it as JSON
    json_response = response.text.replace("```json", "").replace("```", "").strip()
    json_data = json.loads(json_response)
    return jsonify(json_data)
